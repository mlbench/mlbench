# Config file for automatic testing at travis-ci.org
env:
  global:
    - docker_url=registry.hub.docker.com
    - docker_repository=mlbench
jobs:
  include:
    - stage: test
      language: python
      python:
        - 3.4
        - 3.5
        - 3.6

      # Command to install dependencies, e.g. pip install -r requirements.txt --use-mirrors
      install:
        - pip install -U tox-travis
        - pip install -r requirements_dev.txt

      # Command to run tests, e.g. python setup.py test
      script:
        - tox

    - stage: build docker
      language: bash
      sudo: required

      services:
        - docker
      install: true

      before_script: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin ${docker_url}
      script:
        - docker build -f compose/master/Dockerfile -t ${docker_url}/${docker_repository}/mlbench-master:travis-ci-test .
        - docker pull mlbench/mlbench-worker:mlbench-worker-base && docker build -f compose/worker/Dockerfile -t ${docker_url}/${docker_repository}/mlbench-worker:travis-ci-test .
      after_success:
        - docker push ${docker_url}/${docker_repository}/mlbench-master:travis-ci-test
        - docker push ${docker_url}/${docker_repository}/mlbench-worker:travis-ci-test
    - stage: test helm
      language: bash
      sudo: required
      dist: trusty
      env:
        - CNI_PLUGIN=weave

      before_install:
        # install kubeadm-dind
        - curl https://raw.githubusercontent.com/kubernetes-sigs/kubeadm-dind-cluster/master/fixed/dind-cluster-v1.11.sh > dind-cluster.sh
        - chmod 700 dind-cluster.sh
        - ./dind-cluster.sh up
        # install kubectl
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.11.0/bin/linux/amd64/kubectl
        - chmod +x ./kubectl
        # setup credentials
        - ./kubectl --context=dind create secret docker-registry regcred --docker-server=${docker_url} --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD}
        - "./kubectl --context=dind patch serviceaccount default -p '{\"imagePullSecrets\": [{\"name\": \"regcred\"}]}'"
      install:
        # install helm
        - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
        - chmod 700 get_helm.sh
        - ./get_helm.sh
        - helm init --kube-context dind --wait
        #check state before install, for debugging
        - ./kubectl --context=dind get pods --namespace kube-system
        - ./kubectl --context=dind get pods
      script:
        - |
          helm install --kube-context dind \
          --set master.image.repository=${docker_url}/${docker_repository}/mlbench-master \
          --set master.image.tag=travis-ci-test \
          --set worker.image.repository=${docker_url}/${docker_repository}/mlbench-worker \
          --set worker.image.tag=travis-ci-test \
          --set worker.imagePullSecret=regcred \
          --set master.imagePullSecret=regcred \
          --set limits.cpu=1000m \
          --set limits.worker=1 \
          --set worker.replicaCount=1 \
          --set limits.bandwidth=100 \
          --set limits.gpu=0 \
          --wait \
          --timeout 900 \
          charts/mlbench/
        - ./kubectl --context=dind get services |grep 'mlbench-master'
        - ./kubectl --context=dind get pods |grep "mlbench-master.*Running"
        - ./kubectl --context=dind get pods |grep "mlbench-worker.*Running"
      after_failure: 
        #check state for debugging
        - ./kubectl --context=dind get pods --namespace kube-system
        - ./kubectl --context=dind get pods
        - free -h
        - df -h

    - stage: deploy develop
      if: branch = develop
      language: bash
      services: docker
      before_install:
        - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin ${docker_url}
      before_script:
        - docker pull ${docker_repository}/mlbench-master:travis-ci-test
        - docker pull ${docker_repository}/mlbench-worker:travis-ci-test
        - docker tag ${docker_repository}/mlbench-master:travis-ci-test ${docker_url}/${docker_repository}/mlbench-master:develop
        - docker tag ${docker_repository}/mlbench-worker:travis-ci-test ${docker_url}/${docker_repository}/mlbench-worker:develop
      script:
        - docker push ${docker_url}/${docker_repository}/mlbench-master:develop
        - docker push ${docker_url}/${docker_repository}/mlbench-worker:develop

    - stage: deploy
      if: branch = master
      language: bash
      services: docker
      before_install:
        - master_version=$(awk '$1 == "version:" { print $2; exit }' charts/mlbench/Chart.yaml)
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin ${docker_url}
      before_script:
        - docker pull ${docker_repository}/mlbench-master:travis-ci-test
        - docker pull ${docker_repository}/mlbench-worker:travis-ci-test
        - docker tag ${docker_repository}/mlbench-master:travis-ci-test ${docker_url}/${docker_repository}/mlbench-master:latest
        - docker tag ${docker_repository}/mlbench-worker:travis-ci-test ${docker_url}/${docker_repository}/mlbench-worker:latest
        - docker tag ${docker_repository}/mlbench-master:travis-ci-test ${docker_url}/${docker_repository}/mlbench-master:${version}
        - docker tag ${docker_repository}/mlbench-worker:travis-ci-test ${docker_url}/${docker_repository}/mlbench-worker:${version}
      script:
        - docker push ${docker_url}/${docker_repository}/mlbench-master:latest
        - docker push ${docker_url}/${docker_repository}/mlbench-master:${version}
        - docker push ${docker_url}/${docker_repository}/mlbench-worker:latest
        - docker push ${docker_url}/${docker_repository}/mlbench-worker:${version}


stages:
  - test
  - build docker
  - test helm
  - deploy develop
  - deploy
